import logging
from aiogram import types
from aiogram.types.message import Message
from random import uniform, randint

import config
import database
from buy_slave import init_transaction_ as slave_buy_
from dispatcher import dp
from give import init_give
from pay import init_pay
from items import items_ as all_items
from inventory import take_item, item_dice, give_item, take_all_items
from entertainment import ask_, fagot_
from throttling import throttling_ as throttling_all
from utils import human_format
from .cleaner import cleaner_body


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ —é–∑–µ—Ä–∞
async def private_balance_create(message: Message, pass_check=False, cust_usr=0) -> None:
    data = database.PostSQL(message, set_private=pass_check).check_user(custom_user=cust_usr)
    if data:
        try:
            if message.from_user.full_name and \
                    message.from_user.full_name != data[1]:
                database.PostSQL(message).modify_name_(
                    name=message.from_user.full_name)
        except Exception as e:
            logging.debug(e)

        try:
            if message.chat.title and \
                    message.chat.title != data[1]:
                database.PostSQL(message).modify_name_(
                    name=message.chat.title)
        except Exception as e:
            logging.debug(e)

        if not pass_check:
            await message.reply("–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d –≥—Ä–∏–≤–µ–Ω" % database.PostSQL(
                message, set_private=pass_check
            ).get_balance(
                custom_user=cust_usr
            ))
    else:
        database.PostSQL(message, set_private=pass_check).add_user(custom_user=cust_usr)
        database.PostSQL(message, set_private=pass_check).modify_balance(config.START_BALANCE, custom_user=cust_usr)
        await message.reply("–ü—Ä–∏–≤–µ—Ç %s, —Ç–≤–æ–π —Å—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –¢–∞–∫–∂–µ —Ç–µ–±–µ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ %d –≥—Ä–∏–≤–µ–Ω!" % (
            message.from_user.first_name, config.START_BALANCE
        ))


# –°–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∂–µ –¥–ª—è –≤—Å–µ—Ö
@dp.message_handler(commands=['start'], is_private=True)
async def start_for_private(message: types.Message):
    if await throttling_all(message):
        await private_balance_create(message)


@dp.message_handler(commands=['start'], is_group=True)
async def start_for_group(message: types.Message):
    if await throttling_all(message):
        if database.PostSQL(message).check_user():
            await message.reply("–ë–∞–ª–∞–Ω—Å —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: %d –≥—Ä–∏–≤–µ–Ω" % database.PostSQL(message).get_balance())
        else:
            database.PostSQL(message).add_user()
            database.PostSQL(message).modify_balance(config.START_BALANCE)
            await message.reply(
                "–°—á—ë—Ç –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –¢–∞–∫–∂–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ %d –≥—Ä–∏–≤–µ–Ω!" %
                config.START_BALANCE
            )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤—Å—è–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
@dp.message_handler(commands=['wallet'], is_private=True)
async def wallet_private(message: types.Message):
    if await throttling_all(message):
        data = database.PostSQL(message).check_user()
        await message.reply("–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d –≥—Ä–∏–≤–µ–Ω\n–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: ¬´%d¬ª" % (data[2], data[3]))


# –ò –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥—Ä—É–ø–ø –∫–æ–Ω–µ—á–Ω–æ
@dp.message_handler(commands=['wallet'], is_group=True)
async def wallet_group(message: types.Message):
    if await throttling_all(message):
        data = database.PostSQL(message).check_user()
        bot_msg = await message.reply("–ë–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã: %d –≥—Ä–∏–≤–µ–Ω\n–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞ –≥—Ä—É–ø–ø—ã: ¬´%d¬ª" % (data[2], data[3]))
        await cleaner_body(bot_msg)


# –ï—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
@dp.message_handler(commands=['pay'], is_private=True)
async def pay_in_private(message: types.Message):
    if await throttling_all(message):
        try:
            u_, s_ = int(message.text.split()[1]), int(message.text.split()[2])
            if u_ == message.chat.id:
                await message.reply("–ö–∞–∫–æ–µ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                return
            x = await init_pay(message, s_, u_)
            if x:
                await message.reply("–ü–æ–ª—É—á–∞—Ç–µ–ª—å: %d\n–°—É–º–º–∞: %d" % (
                    u_, s_
                ))
        except Exception as e:
            logging.debug(e)
            await message.reply("/pay *–ø–æ–ª—É—á–∞—Ç–µ–ª—å* *—Å—É–º–º–∞*")


@dp.message_handler(commands=['buyslave'])
async def buy_slave_private(message: types.Message):
    if await throttling_all(message):
        try:
            x = await slave_buy_(message)
            if x:
                await message.reply("–¢—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª –Ω–æ–≤–æ–≥–æ —Ä–∞–±–∞ >:)")
        except Exception as e:
            logging.debug(e)


@dp.message_handler(commands=['slaves'])
async def user_slaves(message: types.Message):
    if await throttling_all(message):
        data = int(database.PostSQL(message).get_slaves(
            custom_user=message.from_user.id))
        await message.reply("–£ —Ç–µ–±—è %d —Ä–∞–±–æ–≤\n–î–æ—Ö–æ–¥ —Å –Ω–∏—Ö %d –≥—Ä–∏–≤–µ–Ω –≤ —á–∞—Å" % (
            data, data * config.PAY_PER_SLAVE
        ))


# –ú–æ–∂–Ω–æ –¥–∞–∂–µ –≥–ª—è–Ω—É—Ç—å —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
@dp.message_handler(commands=['inventory'])
async def user_inventory(message: types.Message):
    if await throttling_all(message):
        data = database.PostSQL_Inventory(message).get_inventory()
        items_ = "\n".join(
            ["(%d) %s %s (%d –≥—Ä–∏–≤–µ–Ω)" %
             (
                i[1],
                all_items[i[0]]["icon"],
                all_items[i[0]]["name"],
                all_items[i[0]]["price"]
             ) for i in data]
        )
        bot_msg = await message.reply("%s\n\n–°–ª–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç–æ: <b>%d/50</b>" % (items_, len(data)))
        await cleaner_body(bot_msg)


# –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
@dp.message_handler(commands=['sell'])
async def sell__(message: types.Message):
    if await throttling_all(message):
        try:
            item_id = int(message.text.split()[1])
            data_ = database.PostSQL_Inventory(message).get_item(item_id)
            if int(data_[2]) != message.from_user.id:
                await message.reply("–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è –∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —Ç–≤–æ–π"
                                    "\n–¢—ã –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å —Ä–µ—à–∏–ª —á—Ç–æ –ª–∏? –ì–∞–¥—ë–Ω—ã—à, "
                                    "–∏–¥–∏ –¥–µ–ª–æ–º –ª—É—á—à–µ –∑–∞–π–º–∏—Å—å!")
                return

            x = await take_item(message, item_id)
            item__ = all_items[int(data_[0])]
            item_price = item__["price"]
            if x:
                await init_give(message, item_price, item_sell=True)
                await message.reply("–ü—Ä–µ–¥–º–µ—Ç %s %s –±—ã–ª –ø—Ä–æ–¥–∞–Ω –∑–∞ %d –≥—Ä–∏–≤–µ–Ω!" % (
                    item__["icon"], item__["name"], item_price
                ))
        except Exception as e:
            logging.info(e)
            await message.reply(
                "/sell *ID –ø—Ä–µ–¥–º–µ—Ç–∞*"
                "\n\n–ü—Ä–∏–º–µ—Ä: (*ID –ø—Ä–µ–¥–º–µ—Ç–∞*) üá∫üá∏ "
                "–§–ª–∞–≥ –°–®–ê (15000 –≥—Ä–∏–≤–µ–Ω)"
            )


# –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å—Ä–∞–∑—É
@dp.message_handler(commands=['sellall'])
async def sell_all_items(message: types.Message):
    if await throttling_all(message):
        try:
            items_price = sum([all_items[el[0]]["price"] for el in database.PostSQL_Inventory(message).get_inventory()])
            x = await take_all_items(message)
            if x:
                await init_give(message, items_price, item_sell=True)
                await message.reply("–ü—Ä–µ–¥–º–µ—Ç—ã –±—ã–ª–∏ –ø—Ä–æ–¥–∞–Ω—ã –∑–∞ %s –≥—Ä–∏–≤–µ–Ω!" % human_format(items_price))
        except Exception as e:
            logging.info(e)
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ—Ö–æ–∂–µ —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")


# –ï—Å–ª–∏ –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω –∏–∑ –≥—Ä—É–ø–ø—ã
@dp.message_handler(commands=['pay'], is_admin=True)
async def pay_group_admin(message: types.Message):
    if await throttling_all(message):
        try:
            u_, s_ = int(message.text.split()[1]), int(message.text.split()[2])
            if u_ == message.chat.id:
                await message.reply("–ö–∞–∫–æ–µ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                return
            x = await init_pay(message, s_, u_)
            if x:
                await message.reply("–ü–æ–ª—É—á–∞—Ç–µ–ª—å: %d\n–°—É–º–º–∞: %d" % (
                    u_, s_
                ))
        except Exception as e:
            logging.debug(e)
            await message.reply("/pay *–ø–æ–ª—É—á–∞—Ç–µ–ª—å* *—Å—É–º–º–∞*")


# –ï—Å–ª–∏ –≤—ã–∑–≤–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã, –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands=['pay'], is_admin=False)
async def pay_not_group_admin(message: types.Message):
    if await throttling_all(message):
        await message.reply("–ß—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—á—ë—Ç–æ–º, –Ω—É–∂–Ω–æ –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã.")


# –í—ã–¥–∞—á–∞ –º–æ–Ω–µ—Ç –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
@dp.message_handler(commands=['give'], is_owner=True)
async def give_money(message: types.Message):
    if await throttling_all(message):
        try:
            u_, s_ = int(message.text.split()[1]), int(message.text.split()[2])
            data = database.PostSQL(message).check_user(custom_user=u_)
            x = await init_give(message, s_, u_)
            if x:
                await message.reply("–î–ª—è %s –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ %d –≥—Ä–∏–≤–µ–Ω!" % (
                    data[1], s_
                ))
        except Exception as e:
            logging.debug(e)
            await message.reply("/give *–ø–æ–ª—É—á–∞—Ç–µ–ª—å* *—Å—É–º–º–∞*")


# –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands=['give'], is_owner=False)
async def give_money_no_access(message: types.Message):
    if await throttling_all(message):
        await message.reply("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ!")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∏–¥–æ—Ä–∞—Å–∞
@dp.message_handler(commands=['fagot'], is_group=True)
async def fagot_check(message: types.Message):
    if await throttling_all(message):
        await fagot_(message)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∏–¥–æ—Ä–∞—Å–∞ –≤ –ø—Ä–∏–≤–∞—Ç–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
@dp.message_handler(commands=['fagot'], is_private=True)
async def fagot_check_private(message: types.Message):
    if await throttling_all(message):
        await message.reply("–¢–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–∏ –≤—Å–µ—Ö >:")


# –ù–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
@dp.message_handler(commands=['info'])
async def bot_info(message: types.Message):
    if await throttling_all(message):
        await message.reply(config.BOT_INFO)


# –ù—É –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –±–æ—Ç—É
@dp.message_handler(commands=['faq'])
async def bot_faq(message: types.Message):
    if await throttling_all(message):
        await message.reply(config.BOT_FAQ)


# –ò—Å–ø—ã—Ç–∞–µ–º —É–¥–∞—á—É
@dp.message_handler(commands=['dice'])
async def dice_(message: types.Message):
    if await throttling_all(message):
        if uniform(0, 1) >= 0.4:
            if uniform(0, 1) > 0.3:
                value_ = randint(1, 10) + (randint(30, 200) / uniform(2, 5))
                database.PostSQL(message).modify_balance(value_, custom_user=message.from_user.id)
                bot_msg = await message.reply("–¢–µ–±–µ –≤—ã–ø–∞–ª–æ %d –≥—Ä–∏–≤–µ–Ω!" % value_)
            else:
                item_ = await item_dice()
                await give_item(message, item_['id'])
                bot_msg = await message.reply("–¢–µ–±–µ –≤—ã–ø–∞–ª–æ %s %s (—Å—Ç–æ–∏–º–æ—Å—Ç—å %d –≥—Ä–∏–≤–µ–Ω)" % (
                    item_['icon'], item_['name'], item_['price']
                ))
        else:
            bot_msg = await message.reply("–¢–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ... :(")
        await cleaner_body(bot_msg)


# –î–æ–±–∞–≤–∏–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ —Ç–∞–º —Å–∞–º—ã–π –±–æ–≥–∞—Ç—ã–π
@dp.message_handler(commands=['top'])
async def top_users(message: types.Message):
    if await throttling_all(message):
        data = database.PostSQL(message).get_top_balance()
        top_ = "\n".join(
            ["<b>%d.</b> <i>%s</i> <b>-</b> <code>%s</code> <b>–≥—Ä–∏–≤–µ–Ω</b> | <b>¬´%d¬ª</b>" %
             (i + 1, e[0], human_format(int(e[1])), e[2]) for i, e in enumerate(data)]
        )
        bot_msg = await message.reply("%s\n\n%s\n\n%s" % (
            "<b>- –¢–æ–ø 10 -</b>", top_,
            "<i>–û–±—â–∞—è —Å—É–º–º–∞ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞</i> <code>%s</code> <b>–≥—Ä–∏–≤–µ–Ω</b>" %
            human_format(int(database.PostSQL(message).get_sum_balance()))
        ))
        await cleaner_body(bot_msg)


# –°–ª—É—à–∞–µ–º –≥—Ä—É–ø–ø—É, –∏ –≤—ã–¥–∞—ë–º –¥–ª—è –≥—Ä—É–ø–ø—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –∞–∫—Ç–∏–≤
@dp.message_handler(is_group=True)
async def group_echo(message: types.Message):
    await private_balance_create(message, pass_check=True, cust_usr=message.from_user.id)
    await ask_(message)

    if uniform(0, 1) >= 0.95:
        value_ = randint(5, 100)
        value_for_user = randint(1, 50)

        database.PostSQL(message).modify_balance(value_)

        try:
            database.PostSQL(message).modify_balance(
                value_for_user, custom_user=message.from_user.id,
            )
            await message.answer(
                "–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ - <b>%d</b> –≥—Ä–∏–≤–µ–Ω"
                "\n–¢–∞–∫–∂–µ —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É <b>%s</b> - <b>%d</b> –≥—Ä–∏–≤–µ–Ω" %
                (value_, message.from_user.full_name, value_for_user)
            )
        except Exception as e:
            logging.error(e)
            await message.answer(
                "–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ - <b>%d</b> –≥—Ä–∏–≤–µ–Ω" % value_
            )
