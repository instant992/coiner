import logging
from aiogram.types.message import Message

from dispatcher import bot


async def get_name_(message: Message) -> str:
    """
    –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    :return: –°—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    name_ = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    try:
        try:
            name_ = message.chat.title
        except Exception as e:
            logging.debug(e)
        if not name_:
            try:
                name_ = message.from_user.full_name
            except Exception as e:
                logging.debug(e)
    except Exception as e:
        logging.warning(e)

    return name_


async def notify_(text_: str, user_: int, need_delete: bool = False) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    :param text_: –¢–µ–∫—Å—Ç
    :param user_: ID —é–∑–µ—Ä–∞
    :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏, —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ—Ç
    """
    if need_delete: pass
    try:
        bot_msg = await bot.send_message(
            user_, text_,
        )
        return True
    except Exception as e:
        logging.warning(e)
        return False


def human_format(num: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∏–µ —á–∏—Å–ª–∞ –≤ —É–¥–æ–±–Ω—ã–π –≤–∏–¥ –¥–ª—è –ª—é–¥–µ–π
    –í–∑—è–ª –∫–æ–¥ —Å - https://stackoverflow.com/questions/579310/formatting-long-numbers-as-strings-in-python/45846841
    :param num: –õ—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    :return: –ü—Ä–∏–º–µ—Ä –Ω–∞ –≤—ã—Ö–æ–¥–µ - 9.99K
    """
    num = float('{:.3g}'.format(num))
    magnitude = 0

    while abs(num) >= 1000:
        magnitude += 1
        num /= 1000.0

    return '{}{}'.format('{:f}'.format(num).rstrip('0').rstrip('.'), ['', 'K', 'M', 'B', 'T'][magnitude])


def number_to_words(number: int) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–∏—Å–ª–æ –≤ –ø—Ä–æ–ø–∏—Å—å
    :param number: –ß–∏—Å–ª–æ
    :return: –ü—Ä–æ–ø–∏—Å—å
    """
    x = {1: '–æ–¥–Ω–∞', 2: '–¥–≤–µ', 3: '—Ç—Ä–∏', 4: '—á–µ—Ç—ã—Ä–µ', 5: '–ø—è—Ç—å',
         6: '—à–µ—Å—Ç—å', 7: '—Å–µ–º—å', 8: '–≤–æ—Å–µ–º—å', 9: '–¥–µ–≤—è—Ç—å'}
    y = {10: '–¥–µ—Å—è—Ç—å', 20: '–¥–≤–∞–¥—Ü–∞—Ç—å', 30: '—Ç—Ä–∏–¥—Ü–∞—Ç—å', 40: '—Å–æ—Ä–æ–∫',
         50: '–ø—è—Ç—å–¥–µ—Å—è—Ç', 60: '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', 70: '—Å–µ–º—å–¥–µ—Å—è—Ç',
         80: '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', 90: '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'}
    b = {11: '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', 12: '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', 13: '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å',
         14: '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', 15: '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', 16: '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å',
         17: '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', 18: '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', 19: '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å'}

    number_1 = number % 10
    number_2 = number - number_1

    if number < 10:
        return x.get(number)
    elif number >= 10 and number_2 == 0:
        return y.get(number)
    elif number > 20:
        return y.get(number_2) + ' ' + x.get(number_1)
    elif 10 < number < 20:
        return b.get(number)
    else:
        return '–ß–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ä–µ–∑–∞!'


def cleaner_name(name: str) -> str:
    if len(name) >= 24:
        name = name[:24]
    if len(name) != 0:
        return name
    else:
        return "ü§∑‚Äç‚ôÇÔ∏è"
